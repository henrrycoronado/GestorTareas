# TaskManager (Mini Proyecto CRUD)

Este es un proyecto full-stack para la materia Taller de Dise√±o de Software (I-2025). El objetivo es crear un sistema web de gesti√≥n de tareas donde los usuarios pueden organizar sus actividades en categor√≠as personalizadas, demostrando el ciclo completo de desarrollo de software.

## Tecnolog√≠as Usadas

* **Frontend:** React (con Hooks, React Router y Axios para peticiones HTTP).
* **Backend & Base de Datos:** Supabase (utilizando su servicio de Base de Datos PostgreSQL y Supabase Auth para la autenticaci√≥n).
* **Estilo:** Tailwind CSS (para un dise√±o r√°pido y moderno).
* **Pruebas:** Vitest (para las pruebas unitarias del frontend).
* **Despliegue:** El repositorio est√° alojado en GitHub.

![Arquitectura general](./Frontend/src/assets/Arquitectura.png)

---


## Como ejecutar el proyecto

### Requisitos previos

  - Node.js >= 18
  - Cuenta de Supabase con un proyecto creado (o para revision usar el proyecto supabase ya creado con las credenciales de prueba adjuntadas en el link mas adelante, si aun esta disponible a la fecha)
  - Variables de entorno configuradas

### Pasos

  1. **Clona el repositorio**:
    ```bash
        git clone https://github.com/henrrycoronado/GestorTareas.git
        cd GestorTareas/Frontend
    ```
  2. **Instala las dependencias del frontend**:
    ```bash
        npm install
    ```
  3. **Configura las variables de entorno**:
    Crea un archivo .env en la ra√≠z del proyecto con este contenido:
    ```bash
        VITE_SUPABASE_URL=https://<tu-proyecto>.supabase.co
        VITE_SUPABASE_ANON_KEY=tu-anon-key
    ```
    para esta punto dejare un link temporal habilitado con mis variables de entorno funcionales para su ejecucion:
    ```url
        https://docs.google.com/document/d/1DfCpZol7_iqrk7yUHzszvcRYuYSFNGlQqEoup4z6c5s/edit?usp=sharing
    ```
  4. **Ejecuta el servidor de desarrollo**:
    ```bash
        npm run dev
    ```
  5. **Ejecuta las pruebas unitarias**:
    ```bash
        npm run test
    ```

---

## Patrones de dise√±o

## Patr√≥n aplicado: **Singleton**

Se utiliz√≥ el patr√≥n **Singleton** para gestionar la instancia de conexi√≥n a Supabase. Esto garantiza que toda la aplicaci√≥n trabaje con una √∫nica instancia del cliente Supabase, evitando m√∫ltiples inicializaciones innecesarias y facilitando el mantenimiento del c√≥digo.

### üìÑ Archivo: `src/services/supabaseClient.js`

```js
    import { createClient } from "@supabase/supabase-js";

    let supabase;

    export const getSupabase = () => {
    if (!supabase) {
        supabase = createClient(
        import.meta.env.VITE_SUPABASE_URL,
        import.meta.env.VITE_SUPABASE_ANON_KEY
        );
    }
    return supabase;
    };
```
    ‚úÖ Ventajas del uso de Singleton:
    üîÅ Centraliza la l√≥gica de conexi√≥n: el c√≥digo que se conecta a Supabase est√° encapsulado en un √∫nico archivo reutilizable.

    üö´ Evita m√∫ltiples instancias innecesarias: asegura que solo se cree una instancia del cliente Supabase durante todo el ciclo de vida de la aplicaci√≥n.

    üîß Facilita el testing y mantenimiento del c√≥digo: al estar desacoplado, el cliente se puede mockear f√°cilmente en pruebas unitarias y se puede modificar su configuraci√≥n en un solo lugar.

## Patr√≥n aplicado: **Repository**

Se implement√≥ el patr√≥n **Repository** mediante el archivo `BussisnessRepository`. Este patr√≥n act√∫a como una capa de abstracci√≥n entre la l√≥gica de negocio y la fuente de datos (Supabase). Permite centralizar el acceso y manipulaci√≥n de datos de forma coherente y desacoplada del resto de la aplicaci√≥n.

### üìÑ Archivo: `src/services/BussisnessRepository.js`

```js
    import { supabaseClient }  from '../../supabaseClient';

    export const BussisnessRepository = {
    InsertData: async (table, columns_names, columns_values, column_return = "ninguno") => {
        // ...
    },
    GetDataValue: async (table, reference_column, reference_value, column_name = "ninguno") => {
        // ...
    },
    UpdateData: async (table, reference_column, reference_value, columns_names, columns_values) => {
        // ...
    },
    GetAll: async (table, reference_column, reference_value) => {
        // ...
    },
    };
```
    ‚úÖ Ventajas del uso de Repository:
    üì¶ Reutilizaci√≥n: evita duplicaci√≥n de l√≥gica al interactuar con Supabase desde m√∫ltiples servicios.

    üîÑ Desacoplamiento: desacopla la fuente de datos de la l√≥gica de negocio.

    üß™ Testeo m√°s sencillo: permite hacer mocking del repositorio para pruebas unitarias sin tocar la base de datos.

## Patr√≥n aplicado: **Strategy**

El patr√≥n **Strategy** fue aplicado en `TaskService` para encapsular distintos algoritmos de ordenamiento y filtrado de tareas. Cada estrategia se implementa como un m√©todo espec√≠fico (`OrderByEndDate`, `OrderByCreateDate`, `OrderByCategory`, `OrderByIncomplete`) y puede aplicarse din√°micamente en tiempo de ejecuci√≥n, seg√∫n la opci√≥n seleccionada por el usuario (por ejemplo: `"end_date"`, `"category"`, etc.).

---

### üìÑ Archivo: `src/services/TaskService.js` (fragmento)

```js
    switch (orderBy) {
    case "end_date":
        result = await TaskService.OrderByEndDate(result);
        break;
    case "create_date":
        result = await TaskService.OrderByCreateDate(result);
        break;
    case "category":
        result = await TaskService.OrderByCategory(result);
        break;
    case "incomplete":
        result = await TaskService.OrderByIncomplete(result);
        break;
    default:
        break;
    }
```
    ‚úÖ Ventajas del uso de Strategy:
    üß† Modularidad: cada estrategia est√° encapsulada, facilitando el mantenimiento y la extensibilidad.

    üß© Flexibilidad: permite seleccionar din√°micamente c√≥mo ordenar o filtrar sin cambiar la l√≥gica principal.

    üîÅ Reutilizaci√≥n: se pueden reutilizar estrategias en otros contextos o servicios f√°cilmente.

---

## Estructura de proyecto

Estructura de carpetas/archivos funcionales sugerida:

```bash
    taskmanager/
    ‚îú‚îÄ‚îÄ Frontend/
    ‚îÇ   ‚îú‚îÄ‚îÄ src/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ assets/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Category/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Task/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ User/
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AuthRepository.jsx
    ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ BussisnessRepository.jsx
    ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tests/
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ App.jsx
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.jsx
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.css      
    ‚îÇ   ‚îú‚îÄ‚îÄ .env
    ‚îÇ   ‚îú‚îÄ‚îÄ setupTests.js
    ‚îÇ   ‚îú‚îÄ‚îÄ supabaseClient.js
    ‚îÇ   ‚îú‚îÄ‚îÄ index.html
    ‚îÇ   ‚îî‚îÄ‚îÄ vite.config.js
    ‚îú‚îÄ‚îÄ .gitignore
    ‚îî‚îÄ‚îÄ README.md

```

![Estructura general](./Frontend/src/assets/Estructura.png)

---

## Descripci√≥n del Problema

En la vida diaria, tanto estudiantes como profesionales necesitan una forma organizada y personal de gestionar sus pendientes. Sin una herramienta adecuada, las tareas pueden olvidarse, las fechas l√≠mite pueden pasar desapercibidas y la falta de organizaci√≥n puede generar estr√©s y reducir la productividad. La necesidad es clara: un sistema simple, personal y seguro para administrar tareas y agruparlas de manera l√≥gica.

## Soluci√≥n Planteada

Para resolver este problema, se desarroll√≥ una aplicaci√≥n web que permite a los usuarios registrarse y acceder a un dashboard personal. En este espacio, cada usuario puede realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) tanto para sus tareas como para sus categor√≠as.

La aplicaci√≥n garantiza que la informaci√≥n de cada usuario sea privada y solo accesible por √©l mismo. Las tareas se pueden asociar a categor√≠as, permitiendo una organizaci√≥n visual y l√≥gica que facilita el seguimiento de los pendientes.

---


## Historias de Usuario

### **Historia de Usuario 1: Registro de Nuevo Usuario**

> **Como nuevo usuario,** quiero poder registrarme con mi correo y una contrase√±a para poder tener una cuenta personal y segura donde guardar mis tareas.

#### Criterios de Aceptaci√≥n:

**Escenario 1: Registro exitoso**
* **Dado que** no estoy registrado y me encuentro en la p√°gina de `Registro`.
* **Cuando** ingreso un correo electr√≥nico v√°lido que no ha sido usado antes y una contrase√±a segura (ej. m√≠nimo 6 caracteres) y hago clic en el bot√≥n `Registrarse`.
* **Entonces** se crea mi cuenta de usuario en el sistema y me muestra un mensaje para que valide el correo en mi inbox  y soy redirigido autom√°ticamente a el `SignIn`.

**Escenario 2: Intento de registro con un correo ya existente**
* **Dado que** estoy en la p√°gina de `Registro`.
* **Cuando** ingreso un correo electr√≥nico que ya existe en la base de datos y hago clic en el bot√≥n `Registrarse`.
* **Entonces** permanezco en la p√°gina de registro y veo un mensaje de error claro, como "Este correo electr√≥nico ya est√° en uso".

**Escenario 3: Intento de registro con datos inv√°lidos**
* **Dado que** estoy en la p√°gina de `Registro`.
* **Cuando** ingreso un formato de correo electr√≥nico inv√°lido O una contrase√±a que no cumple los requisitos de seguridad y hago clic en el bot√≥n `Registrarse`.
* **Entonces** no se crea la cuenta y veo un mensaje de error espec√≠fico que me indica cu√°l es el problema (ej. "Formato de correo inv√°lido" o "La contrase√±a debe tener al menos 6 caracteres").

---

### **Historia de Usuario 2: Gesti√≥n de Tareas (CRUD)**

> **Como usuario registrado,** quiero poder crear, ver, editar y eliminar tareas, asign√°ndoles una fecha l√≠mite y un estado, para poder llevar un control detallado de mis pendientes.

#### Criterios de Aceptaci√≥n:

**Escenario 1: Crear una tarea nueva**
* **Dado que** he iniciado sesi√≥n y estoy en mi `Dashboard`.
* **Cuando** hago clic en el bot√≥n `Task Managment` y completo los campos del formulario: `t√≠tulo`, `descripci√≥n`, `fecha(s)` y selecciono una `categor√≠a` y hago clic en `Guardar`.
* **Entonces** la nueva tarea aparece en mi calendario de tareas del `Dashboard` (respecto a la fecha asignada) con el estado "Pendiente" por defecto.

**Escenario 2: Editar una tarea existente**
* **Dado que** tengo al menos una tarea en mi lista.
* **Cuando** hago clic en el √≠cono de `Editar` de una tarea espec√≠fica y modifico su `descripci√≥n` y cambio su `fecha l√≠mite` y hago clic en `Guardar`.
* **Entonces** la tarea en mi lista se actualiza y muestra la nueva informaci√≥n.

**Escenario 3: Marcar una tarea como completada**
* **Dado que** tengo una tarea con estado "Pendiente".
* **Cuando** hago clic en la casilla de verificaci√≥n (checkbox) o en el bot√≥n para marcarla como completada.
* **Entonces** el estado de la tarea cambia a "Completada" y su apariencia visual cambia para reflejar el nuevo estado (ej. texto tachado).

**Escenario 4: Eliminar una tarea**
* **Dado que** tengo una tarea que ya no necesito.
* **Cuando** hago clic en el √≠cono de `Eliminar` de esa tarea y confirmo mi decisi√≥n en el di√°logo de confirmaci√≥n (ej. "¬øEst√°s seguro?").
* **Entonces** la tarea desaparece permanentemente de mi lista.

---

### **Historia de Usuario 3: Gesti√≥n de Categor√≠as**

> **Como usuario organizado,** quiero poder crear categor√≠as personalizadas (como "Universidad", "Trabajo" o "Personal") para poder agrupar mis tareas y encontrarlas m√°s f√°cilmente.

#### Criterios de Aceptaci√≥n:

**Escenario 1: Crear una nueva categor√≠a**
* **Dado que** estoy en la p√°gina de `Gestionar Categor√≠as`.
* **Cuando** escribo un nombre para mi nueva categor√≠a (ej. "Estudios de Piano") en el campo de texto y hago clic en el bot√≥n `Crear` o `A√±adir`.
* **Entonces** la nueva categor√≠a aparece en mi lista de categor√≠as disponibles.

**Escenario 2: Vincular una tarea a una categor√≠a**
* **Dado que** he creado al menos una categor√≠a.
* **Cuando** creo o edito una tarea.
* **Entonces** el campo `categor√≠a` es un men√∫ desplegable que contiene los nombres de todas las categor√≠as que he creado y puedo seleccionar una de ellas para asignarla a la tarea.



---

## Lecciones aprendidas

- La **integraci√≥n de Supabase** permite crear aplicaciones fullstack sin necesidad de construir un backend desde cero, utilizando su servicio de base de datos PostgreSQL y autenticaci√≥n integrada.
- Aplicar un **patr√≥n de dise√±o como Singleton** mejora la estructura del c√≥digo, asegurando que se utilice una sola instancia de Supabase en toda la aplicaci√≥n, facilitando el mantenimiento y evitando errores por conexiones duplicadas.
- La **autenticaci√≥n y autorizaci√≥n** con Supabase es potente pero requiere cuidado. Validar el `user.id` en cada operaci√≥n es fundamental para asegurar que los datos sean privados y seguros.
- Descubr√≠ que las **pruebas unitarias**, aunque peque√±as, ayudan mucho a identificar errores l√≥gicos y asegurar que los componentes funcionen de forma aislada.
- El uso de **React Router**, junto con hooks como `useState`, `useEffect`, y `useNavigate`, fue esencial para una navegaci√≥n fluida y manejo efectivo del estado.
- Gracias a **Tailwind CSS**, fue posible dise√±ar una interfaz moderna y responsive sin escribir CSS personalizado para cada componente, ahorrando tiempo y esfuerzo.

---